%{
#include<iostream>
#include<map>
#include<vector>
#include<cstdio>
#include<cstdlib>
#include<string>

using namespace std;

extern int yylex();
void yyerror(string s){
    cerr << "Sintaksna greska: " << s << endl;
    exit(EXIT_FAILURE); 
}
map<string, int> promenljive_skalar;
map<string, vector<int>*> promenljive_lista;

%}
%union{
    std::string *ime;
    int vrednost;
    vector<int> *lista;
}
%token EQ_T OR_T AND_T NEQ_T EQUI_T HEAD_T IMPL_T TAIL_T
%token<ime> ID_T IDL_T
%token<vrednost> BROJ_T VAL_T

%type<vrednost> izraz
%type<lista> lista niz_el

%left EQUI_T
%left IMPL_T
%left AND_T
%left OR_T
%right NEQ_T

%start program
%%
program: program naredba '\n'
       | naredba '\n'   
       ;
naredba: ID_T EQ_T izraz    {
        promenljive_skalar[*$1] = $3;
        delete $1;
}
       | IDL_T EQ_T lista   {
           promenljive_lista[*$1] = new vector<int>(*$3);
           delete $1;
           delete $3;
       }
       | izraz              {
           switch($1){
               case 2:
               cout << "False" << endl;
               break;
               case 1:
               cout << "True"  << endl;
               break;
               case 0:
               cout << "Undef" << endl;
               break;
               default:
               cout << $1 << endl;
               break;
           }
       }
       ;
izraz:  izraz OR_T izraz    {
    if($1 == 1 || $3 == 1)
        $$ = 1;
    if($1 == 0 || $3 == 0)
        $$ = 0;
    else
        $$ = 2;
}
     |  izraz AND_T izraz   {
        if($1 == 2 || $3 == 2)
            $$ = 2;
        if($1 == 0 || $3 == 0)
            $$ = 0;
        else
            $$ = 1;
     }
     |  izraz EQUI_T izraz  {
		if($1 == 1 && $3 == 1)
			$$ = 1;
		else if($1 == 2 && $3 == 2)
			$$ = 1;
		else if($1 == 0 || $3 == 0)
			$$ = 0;
		else
			$$ = 2;
     }
     |  izraz IMPL_T izraz  {
        if($1 == 2)
			$$ = 1;
		else if($3 == 1)
			$$ = 1;
		else if($1 == 0)
			$$ = 0;
		else if($3 == 0)
			$$ = 0;
		else
			$$ = 2;
     }
     |  NEQ_T izraz         {
         if($2 == 2)
            $$ = 1;
         else if( $2 == 1)
            $$ = 2;
         else $$ = 0;
     }
     |  '(' izraz ')'       {
         $$ = $2;
     }
     |  ID_T                {
         $$ = promenljive_skalar[*$1];
         delete $1;
     }
     |  VAL_T               {$$ = $1;}
     |  IDL_T '[' BROJ_T ']'{
         auto it = promenljive_lista.find(*$1);
         if(it == promenljive_lista.end())
            yyerror("Nedefinisana lista!");
         if($3 >= it->second->size())
            yyerror("Pristup elementu van granica opsega!");
         $$ = (*(it->second))[$3];
         delete $1;
     }
     |  HEAD_T '(' lista ')'{
         $$ = (*$3)[0];
         delete $3;
     } 
     ;
lista: '['niz_el ']'  {
        $$ = $2;
}
    | IDL_T {
        auto it = promenljive_lista.find(*$1);
        if(it == promenljive_lista.end())
            yyerror("Nedefinisana lista!");
        $$ = new vector<int>(*(it->second));
        delete $1;
    }
    | TAIL_T '(' IDL_T ')'      {
        if($3->size() <= 1)
            yyerror("Ne moze se od jednoclane liste uzeti rep!");
        $$ = new vector<int>($3->begin() + 1, $3->end());
        delete $3;
    }
    ;
niz_el: niz_el ',' izraz        {
      $1->push_back($3);
      $$ = $1;
}
      | izraz                   {
          $$ = new vector<int>;
          $$->push_back($1);
      }
      ;


%%

int main(){
    if(yyparse() == 0)
        cout << "Sve je okej!" << endl;
    else{
        cout << "Sintaksna greska!" << endl;
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}